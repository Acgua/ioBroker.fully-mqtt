{
  "version": 3,
  "sources": ["../../src/lib/methods.ts"],
  "sourcesContent": ["/**\n * Methods and Tools\n * @desc    Methods and Tools\n * @author  Acgua <https://github.com/Acgua/ioBroker.fully-mqtt>\n * @license Apache License 2.0\n *\n * ----------------------------------------------------------------------------------------\n * How to implement this file in main.ts (see also https://stackoverflow.com/a/58459668)\n * ----------------------------------------------------------------------------------------\n *  1. Add \"this: InstanceWatcher\" as first function parameter if you need access to \"this\"\n *       -> no need to provide this parameter when calling the method, though!\n *  1. Add line like \"import { err2Str, isEmpty } from './lib/methods';\"\n *  2. Add keyword \"export\" before \"class InstanceWatcher extends utils.Adapter\"\n *  3. class InstanceWatcher: for each method, add line like: \"public isEmpty = isEmpty.bind(this);\"\n *           Note: use \"private isEmpty...\" and not \"public\", if you do not need to access method from this file\n */\nimport { FullyMqtt } from '../main';\n// import { IDevice } from './interfaces';\n\n/**\n * Convert error to string\n * @param {*} error - any kind of thrown error\n * @returns string\n */\nexport function err2Str(error: any): string {\n    if (error instanceof Error) {\n        if (error.stack) return error.stack;\n        if (error.message) return error.message;\n        return JSON.stringify(error);\n    } else {\n        if (typeof error === 'string') return error;\n        return JSON.stringify(error);\n    }\n}\n\n/**\n * Clean device name for state\n * @param str - device name\n * @returns device name without forbidden chars, and without any dots.\n */\nexport function cleanDeviceName(this: FullyMqtt, str: string): string {\n    let res = str.replace(this.FORBIDDEN_CHARS, ''); // https://github.com/ioBroker/ioBroker.js-controller/blob/master/packages/common/src/lib/common/tools.ts\n    res = res.replace(/\\./g, ''); // remove any dots \".\"\n    res = res.replace(/\\s{2,}/g, ' '); // replace multiple whitespaces with single space\n    res = res.trim(); // removes whitespace from both ends\n    res = res.replace(/\\s/g, '_'); // replace whitespaces with _\n    if (res.replace(/_/g, '').length === 0) res = ''; // return empty str if just _ is left\n    return res;\n}\n\n/**\n * Check if IP address is valid - https://stackoverflow.com/a/27434991\n * @param ip IP address\n * @returns true if valid, false if not\n */\nexport function isIpAddressValid(ip: string): true | false {\n    const pattern = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    if (pattern.test(ip)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Retrieve values from a CONFIG variable, example:\n * const CONF = [{car: 'bmw', color: 'black', hp: '250'}, {car: 'audi', color: 'blue', hp: '190'}]\n * To get the color of the Audi, use: getConfigValuePerKey(CONF, 'car', 'audi', 'color')\n * To find out which car has 190 hp, use: getConfigValuePerKey(CONF, 'hp', '190', 'car')\n * @param {object}  config     The configuration variable/constant\n * @param {string}  key1       Key to look for.\n * @param {string | number}  key1Value  The value the key should have\n * @param {string}  key2       The key which value we return\n * @returns {any}    Returns the element's value, or number -1 of nothing found.\n */\nexport function getConfigValuePerKey(config: { [k: string]: any }[], key1: string, key1Value: string | number, key2: string): any {\n    for (const lpConfDevice of config) {\n        if (lpConfDevice[key1] === key1Value) {\n            if (lpConfDevice[key2] === undefined) {\n                return -1;\n            } else {\n                return lpConfDevice[key2];\n            }\n        }\n    }\n    return -1;\n}\n\n/**\n * Checks if an operand (variable, constant, object, ...) is considered as empty.\n * - empty:     undefined; null; string|array|object, stringified and only with white space(s), and/or `><[]{}`\n * - NOT empty: not matching anything above; any function; boolean false; number -1\n * inspired by helper.js from SmartControl adapter\n */\nexport function isEmpty(toCheck: any): true | false {\n    if (toCheck === null || typeof toCheck === 'undefined') return true;\n    if (typeof toCheck === 'function') return false;\n    let x = JSON.stringify(toCheck);\n    x = x.replace(/\\s+/g, ''); // white space(s)\n    x = x.replace(/\"+/g, ''); // \"\n    x = x.replace(/'+/g, ''); // '\n    x = x.replace(/\\[+/g, ''); // [\n    x = x.replace(/\\]+/g, ''); // ]\n    x = x.replace(/\\{+/g, ''); // {\n    x = x.replace(/\\}+/g, ''); // }\n    return x === '' ? true : false;\n}\n\n/**\n * async wait/pause\n * Actually not needed since a single line, but for the sake of using wait more easily\n * @param {number} ms - number of milliseconds to wait\n */\nexport async function wait(this: FullyMqtt, ms: number): Promise<void> {\n    try {\n        await new Promise((w) => setTimeout(w, ms));\n    } catch (e) {\n        this.log.error(this.err2Str(e));\n        return;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBO,SAAS,QAAQ,OAAoB;AACxC,MAAI,iBAAiB,OAAO;AACxB,QAAI,MAAM;AAAO,aAAO,MAAM;AAC9B,QAAI,MAAM;AAAS,aAAO,MAAM;AAChC,WAAO,KAAK,UAAU,KAAK;AAAA,EAC/B,OAAO;AACH,QAAI,OAAO,UAAU;AAAU,aAAO;AACtC,WAAO,KAAK,UAAU,KAAK;AAAA,EAC/B;AACJ;AAOO,SAAS,gBAAiC,KAAqB;AAClE,MAAI,MAAM,IAAI,QAAQ,KAAK,iBAAiB,EAAE;AAC9C,QAAM,IAAI,QAAQ,OAAO,EAAE;AAC3B,QAAM,IAAI,QAAQ,WAAW,GAAG;AAChC,QAAM,IAAI,KAAK;AACf,QAAM,IAAI,QAAQ,OAAO,GAAG;AAC5B,MAAI,IAAI,QAAQ,MAAM,EAAE,EAAE,WAAW;AAAG,UAAM;AAC9C,SAAO;AACX;AAOO,SAAS,iBAAiB,IAA0B;AACvD,QAAM,UAAU;AAChB,MAAI,QAAQ,KAAK,EAAE,GAAG;AAClB,WAAO;AAAA,EACX,OAAO;AACH,WAAO;AAAA,EACX;AACJ;AAaO,SAAS,qBAAqB,QAAgC,MAAc,WAA4B,MAAmB;AAC9H,aAAW,gBAAgB,QAAQ;AAC/B,QAAI,aAAa,UAAU,WAAW;AAClC,UAAI,aAAa,UAAU,QAAW;AAClC,eAAO;AAAA,MACX,OAAO;AACH,eAAO,aAAa;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX;AAQO,SAAS,QAAQ,SAA4B;AAChD,MAAI,YAAY,QAAQ,OAAO,YAAY;AAAa,WAAO;AAC/D,MAAI,OAAO,YAAY;AAAY,WAAO;AAC1C,MAAI,IAAI,KAAK,UAAU,OAAO;AAC9B,MAAI,EAAE,QAAQ,QAAQ,EAAE;AACxB,MAAI,EAAE,QAAQ,OAAO,EAAE;AACvB,MAAI,EAAE,QAAQ,OAAO,EAAE;AACvB,MAAI,EAAE,QAAQ,QAAQ,EAAE;AACxB,MAAI,EAAE,QAAQ,QAAQ,EAAE;AACxB,MAAI,EAAE,QAAQ,QAAQ,EAAE;AACxB,MAAI,EAAE,QAAQ,QAAQ,EAAE;AACxB,SAAO,MAAM,KAAK,OAAO;AAC7B;AAOA,eAAsB,KAAsB,IAA2B;AACnE,MAAI;AACA,UAAM,IAAI,QAAQ,CAAC,MAAM,WAAW,GAAG,EAAE,CAAC;AAAA,EAC9C,SAAS,GAAP;AACE,SAAK,IAAI,MAAM,KAAK,QAAQ,CAAC,CAAC;AAC9B;AAAA,EACJ;AACJ;",
  "names": []
}
