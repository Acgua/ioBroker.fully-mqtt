{
  "version": 3,
  "sources": ["../../src/lib/mqtt-server.ts"],
  "sourcesContent": ["import Aedes from 'aedes';\nimport net from 'net';\nimport { FullyMqtt } from '../main';\n//import { inspect } from 'util';\n\ninterface IMqttDevice {\n    ip?: string;\n    lastSeen?: number;\n}\n\nexport class MqttServer {\n    private readonly adapter: FullyMqtt;\n    private server: net.Server;\n    private aedes: Aedes;\n    private devices: { [k: string]: IMqttDevice }; // {}\n    private port = -1;\n    private previousInfoPublishTime = 0;\n\n    /**\n     * Constructor\n     */\n    public constructor(adapter: FullyMqtt) {\n        this.adapter = adapter;\n        //this.server = new net.Server();\n        this.aedes = new Aedes();\n        /** @ts-expect-error - https://github.com/moscajs/aedes/issues/801 */\n        this.server = net.createServer(undefined, this.aedes.handle);\n        this.devices = {};\n    }\n\n    /**\n     * Listen\n     */\n    public start(): void {\n        try {\n            /**\n             * Port\n             */\n            this.port = this.adapter.config.mqttPort;\n            this.port = 1929; // #############################################################\n\n            /**\n             * Start Listening\n             */\n            this.server.listen(this.port, () => {\n                this.adapter.log.info(`[MQTT] \uD83D\uDE80 Server started and listening on \\x1b[34mport ${this.port}\\x1b[0m`);\n            });\n\n            /**\n             * Verify authorization\n             * https://github.com/moscajs/aedes/blob/main/docs/Aedes.md#handler-authenticate-client-username-password-callback\n             */\n            if (!this.adapter.config.mqttDoNotVerifyUserPw) {\n                this.aedes.authenticate = (client, username, password, callback) => {\n                    // Username\n                    this.adapter.log.debug(`[MQTT] Aedes server authenticating ${client.id}...`);\n                    if (username !== this.adapter.config.mqttUser) {\n                        this.adapter.log.warn(`[MQTT] Authorization rejected: received user name '${username}' does not match '${this.adapter.config.mqttUser}' in adapter settings.`);\n                        callback(null, false);\n                    }\n\n                    // Password\n                    if (password.toString() !== this.adapter.config.mqttPassword) {\n                        this.adapter.log.warn(`[MQTT] Authorization rejected: received password does not match with password in adapter settings.`);\n                        callback(null, false);\n                    }\n                    this.adapter.log.debug(`[MQTT] User \\x1b[34m${username}\\x1b[0m successfully authorized.`);\n                    callback(null, true);\n                };\n            }\n\n            /**\n             * fired when a client connects\n             */\n            this.aedes.on('client', (client) => {\n                try {\n                    if (!client) {\n                        this.adapter.log.error(`[MQTT] Unknown client connected`);\n                        return;\n                    }\n                    // Create device entry with id as key, if not yet existing\n                    if (!this.devices[client.id]) this.devices[client.id] = {};\n                    // save client's last seen\n                    this.devices[client.id].lastSeen = Date.now();\n                    this.adapter.log.info(`[MQTT] \uD83D\uDD17 Client \\x1b[33m${client.id}\\x1b[0m successfully connected.`);\n                    this.adapter.log.debug(`[MQTT] Client ${client.id} connected to broker ${this.aedes.id}`);\n                    //this.adapter.log.debug(inspect(client)); //https://stackoverflow.com/a/31557814\n                } catch (e) {\n                    this.adapter.log.error(this.adapter.err2Str(e));\n                    return;\n                }\n            });\n\n            /**\n             * fired when a client publishes a message packet on the topic\n             */\n            this.aedes.on('publish', (packet, client) => {\n                try {\n                    if (!client || !packet) return;\n\n                    // Create device entry with id as key, if not yet existing\n                    if (!this.devices[client.id]) this.devices[client.id] = {};\n                    // save client's last seen\n                    this.devices[client.id].lastSeen = Date.now();\n\n                    // QOS is always 1 per Fully documentation\n                    if (packet.qos !== 1) return;\n\n                    if (packet.retain) {\n                        /**\n                         * Device Info coming in...\n                         * Per fully documentation: The complete device info will be published every 60 seconds as fully/deviceInfo/[deviceId] topic (retaining, QOS=1).\n                         */\n\n                        // Payload\n                        // {\"deviceId\":\"8613ffb6-45c03176\",\"deviceName\":\"Lenovo Tab P11 Plus\",\"packageName\":\"de.ozerov.fully\",\"altitude\":554.300048828125,\"longitude\":11.5750529,\"latitude\":48.1789954,\"locationProvide\":\"network\",\"batteryLevel\":41,\"isPlugged\":true,\"SSID\":\"\\\"XPF5\\\"\",\"BSSID\":\"2c:3a:fd:25:19:d4\",\"Mac\":\"1E:78:ED:39:92:34\",\"ip4\":\"20.0.0.101\",\"ip6\":\"FE80::1C78:EDFF:FE39:9234\",\"hostname4\":\"20.0.0.101\",\"hostname6\":\"fe80::1c78:edff:fe39:9234%wlan0\",\"wifiSignalLevel\":7,\"isMobileDataEnabled\":false,\"screenOrientation\":90,\"screenBrightness\":100,\"screenLocked\":true,\"screenOn\":false,\"batteryTemperature\":25,\"plugged\":true,\"keyguardLocked\":true,\"locale\":\"de_DE\",\"serial\":\"unknown\",\"version\":\"1.49.3-play\",\"versionCode\":1109,\"build\":\"TB-J616F_S240155_230210_ROW\",\"model\":\"Lenovo TB-J616F\",\"manufacturer\":\"LENOVO\",\"androidVersion\":\"12\",\"SDK\":31,\"webviewUA\":\"Mozilla/5.0 (Linux; Android 12; Lenovo TB-J616F Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/96.0.4664.104 Safari/537.36\",\"foreground\":\"de.ozerov.fully\",\"motionDetectorStatus\":2,\"isDeviceAdmin\":true,\"isDeviceOwner\":false,\"internalStorageFreeSpace\":114737397760,\"internalStorageTotalSpace\":117537521664,\"ramUsedMemory\":2821664768,\"ramFreeMemory\":3263516672,\"ramTotalMemory\":6085181440,\"appUsedMemory\":13735520,\"appFreeMemory\":254699936,\"appTotalMemory\":268435456,\"timestamp\":1677695286070,\"scopedStorage\":true,\"displayHeightPixels\":1200,\"displayWidthPixels\":2000,\"isMenuOpen\":false,\"topFragmentTag\":\"\",\"isInDaydream\":false,\"appStartTime\":\"01.03.23 19:17:54\",\"isRooted\":false,\"isLicensed\":true,\"isInScreensaver\":false,\"kioskLocked\":true,\"isInForcedSleep\":false,\"maintenanceMode\":false,\"kioskMode\":true,\"startUrl\":\"http://20.0.0.32:20002/vis/index.html?Lenovo_r0#--Home\",\"currentTabIndex\":0,\"mqttConnected\":true,\"currentPageUrl\":\"http://20.0.0.32:20002/vis/index.html?Lenovo_r0#--Home\"}\n                        const info = JSON.parse(packet.payload.toString());\n\n                        // Verification of device info packet\n                        // We don't use topic to check since we do not want to rely on user's input in Fully Browser \"MQTT Device Info Topic\" settings.\n                        if (!('startUrl' in info)) {\n                            this.adapter.log.error(`[MQTT] Packet rejected: ${info.ip4} - Info packet expected, but startUrl is not defined in packet. ${info.deviceId}`);\n                            return;\n                        }\n\n                        // Slow down: Don't accept info event more often than x seconds\n                        // Per Fully doc, should not come in more often than 60s anyway...\n                        const prevTime = this.previousInfoPublishTime;\n                        const limit = this.adapter.config.mqttPublishedInfoDelay * 1000; // milliseconds\n                        if (this.previousInfoPublishTime !== 0) {\n                            if (Date.now() - prevTime < limit) {\n                                this.adapter.log.silly(`[MQTT] Packet rejected: ${info.ip4} - Last packet came in ${Date.now() - prevTime}ms ago...`);\n                                return;\n                            }\n                        }\n                        this.previousInfoPublishTime = Date.now(); // set for future events\n\n                        // Set IP\n                        if (!this.adapter.activeDeviceIPs.includes(info.ip4)) {\n                            this.adapter.log.error(`[MQTT] Packet rejected: IP ${info.ip4} is not allowed per adapter settings. ${client.id}`);\n                            return;\n                        }\n                        this.devices[client.id].ip = info.ip4;\n\n                        // Call function\n                        const result = {\n                            clientId: client.id,\n                            ip: info.ip4,\n                            topic: packet.topic,\n                            infoObj: info,\n                        };\n                        this.adapter.onMqttInfo(result);\n                    } else if (packet.qos === 1 && !packet.retain) {\n                        /**\n                         * Event coming in...\n                         * Per fully documentation: Events will be published as fully/event/[eventId]/[deviceId] topic (non-retaining, QOS=1).\n                         */\n                        // {\"deviceId\":\"xxxxxxxx-xxxxxxxx\",\"event\":\"screenOn\"}\n                        // NOTE: Device ID is different to client id, we actually disregard deviceId\n                        const msg = JSON.parse(packet.payload.toString());\n\n                        // Verification of event packet\n                        // We don't use topic to check since we do not want to rely on user's input in Fully Browser \"MQTT Event Topic\" settings.\n                        if (!('event' in msg)) {\n                            this.adapter.log.error(`[MQTT] Packet rejected: Event packet expected, but event is not defined in packet. ${client.id}`);\n                            return;\n                        }\n\n                        // Disregard first event once connected: mqttConnected\n                        if (msg.event === 'mqttConnected') {\n                            this.adapter.log.silly(`[MQTT] Client Publish Event: Disregard mqttConnected event - ${msg.deviceId}`);\n                            return;\n                        }\n\n                        // Get IP\n                        if (!this.devices[client.id]) {\n                            this.adapter.log.info(`[MQTT] Client Publish Event: Device ID and according IP not yet seen thru \"Publish Info\"`);\n                            this.adapter.log.info(`[MQTT] We wait until first info is published. ${msg.deviceId}`);\n                            return;\n                        }\n                        const ip = this.devices[client.id].ip ? this.devices[client.id].ip : '';\n                        if (ip === '' || typeof ip !== 'string') {\n                            this.adapter.log.debug(`[MQTT] Client Publish Event: IP address could not be determined. - Client ID: ${client.id}`);\n                            this.adapter.log.debug(`[MQTT] Please be patient until first MQTT info packet coming in (takes up to 1 minute)`);\n                            return; // Disregard since IP is unknown!\n                        }\n\n                        // Call function\n                        const result = {\n                            clientId: client.id,\n                            ip: ip,\n                            topic: packet.topic,\n                            cmd: msg.event,\n                        };\n                        this.adapter.onMqttEvent(result);\n                    } else {\n                        // Ignore\n                        return;\n                    }\n                } catch (e) {\n                    this.adapter.log.error(this.adapter.err2Str(e));\n                    return;\n                }\n            });\n\n            this.aedes.on('clientError', (client, e) => {\n                this.adapter.log.error(`\uD83D\uDD25[MQTT] Client error - ${e.message}`);\n                this.adapter.log.debug(`[MQTT] Client error - stack: ${e.stack}`);\n            });\n            this.aedes.on('connectionError', (client, e) => {\n                this.adapter.log.error(`\uD83D\uDD25[MQTT] Connection error - ${e.message}`);\n                this.adapter.log.debug(`[MQTT] Connection error - stack: ${e.stack}`);\n            });\n\n            /**\n             * on server error\n             */\n            this.server.on('error', (e: any) => {\n                if (e instanceof Error && e.message.startsWith('listen EADDRINUSE')) {\n                    this.adapter.log.debug(`[MQTT] Cannot start server - ${e.message}`);\n                    this.adapter.log.error(`\uD83D\uDD25[MQTT] Cannot start server - Port ${this.port} is already in use. Try a different port!`);\n                } else {\n                    this.adapter.log.error(`\uD83D\uDD25[MQTT] Cannot start server - ${e.message}`);\n                }\n                this.terminate();\n            });\n        } catch (e) {\n            this.adapter.log.error(this.adapter.err2Str(e));\n            return;\n        }\n    }\n\n    /**\n     * check if number like 600 is in [100, 200, 300, 400, 500, 600, 700, (unlimited)]\n     * @param num - given number\n     * @param everyX - every x number\n     */\n    private isNumberEveryX(num: number, everyX: number): boolean {\n        if (num % everyX == 0 && num != 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Terminate MQTT Server and close all...\n     */\n    public terminate(): void {\n        this.adapter.log.info(`[MQTT] Disconnect all clients and close server`);\n        if (this.aedes) {\n            this.aedes.close(() => {\n                this.adapter.log.debug('[MQTT] aedes.close() succeeded');\n                if (this.server) {\n                    this.server.close(() => {\n                        this.adapter.log.debug('[MQTT] server.close() succeeded');\n                    });\n                }\n            });\n        } else if (this.server) {\n            this.server.close(() => {\n                this.adapter.log.debug('[MQTT] server.close() succeeded');\n            });\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["Aedes", "net"]
}
