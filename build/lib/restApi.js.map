{
  "version": 3,
  "sources": ["../../src/lib/restApi.ts"],
  "sourcesContent": ["/**\r\n * REST API Class\r\n * Purpose: sending commands to Fully, since sending via MQTT is not supported by Fully.\r\n */\r\n\r\nimport axios from 'axios';\r\nimport { FullyMqtt } from '../main';\r\nimport { IDevice } from './interfaces';\r\n\r\n/**\r\n * @class RestApi\r\n * @desc  To send commands via REST API to Fully Browser\r\n */\r\nexport class RestApiFully {\r\n    /**\r\n     * Constants and Variables\r\n     */\r\n    private readonly adapter: FullyMqtt;\r\n\r\n    /**\r\n     * Class Constructor\r\n     * @param adapter - ioBroker adapter instance object\r\n     */\r\n    public constructor(adapter: FullyMqtt) {\r\n        this.adapter = adapter;\r\n    }\r\n\r\n    /**\r\n     * Send a command to Fully\r\n     * @param device - device object\r\n     * @param cmd - 'loadStartURL', 'screenOn', etc.\r\n     * @param val - state value\r\n     * @returns true if successful, false if not\r\n     */\r\n    public async sendCmd(device: IDevice, cmd: string, val: any): Promise<boolean> {\r\n        try {\r\n            interface ISendCmd {\r\n                urlParameter: string;\r\n                cleanSpaces?: true;\r\n                encode?: true;\r\n            }\r\n            const cmds: { [k: string]: ISendCmd } = {\r\n                textToSpeech: { urlParameter: 'cmd=textToSpeech&text=', cleanSpaces: true, encode: true },\r\n                loadURL: { urlParameter: 'cmd=loadURL&url=', cleanSpaces: true, encode: true },\r\n                startApplication: { urlParameter: 'cmd=startApplication&package=', cleanSpaces: true },\r\n                screenBrightness: { urlParameter: 'cmd=setStringSetting&key=screenBrightness&value=' },\r\n                setAudioVolume: { urlParameter: 'cmd=setAudioVolume&stream=3&level=' },\r\n            };\r\n            let finalUrlParam = '';\r\n            if (cmd in cmds) {\r\n                if (cmds[cmd].cleanSpaces) {\r\n                    val = val.toString().trim();\r\n                    val = val.replace(/\\s+/g, ' ');\r\n                }\r\n                if (cmds[cmd].encode) {\r\n                    val = val.toString().trim();\r\n                    val = encodeURIComponent(val);\r\n                }\r\n                finalUrlParam = cmds[cmd].urlParameter + val;\r\n            } else {\r\n                finalUrlParam = 'cmd=' + cmd;\r\n            }\r\n\r\n            const result = await this.axiosSendCmd(device, cmd, finalUrlParam);\r\n            return result;\r\n        } catch (e) {\r\n            this.adapter.log.error(`[REST] ${device.name}: ${this.adapter.err2Str(e)}`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Axios: Send Command\r\n     * @param device - device object\r\n     * @param cmd - Command like \"screenOff\"\r\n     * @param urlParam - URL parameter like \"cmd=screenOff\"\r\n     * @returns false if error, true if successful\r\n     */\r\n    private async axiosSendCmd(device: IDevice, cmd: string, urlParam: string): Promise<true | false> {\r\n        // Base URL\r\n        const url = `${device.restProtocol}://${device.ip}:${device.restPort}/?password=${this.encodePassword(device.restPassword)}&type=json&${urlParam}`;\r\n\r\n        // Axios config\r\n        const config = {\r\n            method: 'get',\r\n            timeout: this.adapter.config.restTimeout,\r\n        };\r\n\r\n        try {\r\n            // Log\r\n            let urlHiddenPassword = url;\r\n            urlHiddenPassword = urlHiddenPassword.replace(/password=.*&type/g, 'password=(hidden)&type');\r\n            this.adapter.log.debug(`[REST] ${device.name}: Start sending command ${cmd}, URL: ${urlHiddenPassword}`);\r\n\r\n            // Axios: Send command\r\n            const response = await axios.get(url, config);\r\n\r\n            // Errors\r\n            if (response.status !== 200) {\r\n                this.adapter.log.error(`[REST] ${device.name}: Sending command ${cmd} failed: ${response.status} - ${response.statusText}`);\r\n                return false;\r\n            }\r\n            if (!('status' in response)) {\r\n                this.adapter.log.error(`[REST] ${device.name}: Sending command ${cmd} failed: Response received but it does not have key 'status'`);\r\n                return false;\r\n            }\r\n            if (!('data' in response)) {\r\n                this.adapter.log.error(`[REST] ${device.name}: Sending command ${cmd} failed: Response received but it does not have key 'data'`);\r\n                return false;\r\n            }\r\n            this.adapter.log.debug(`[REST] ${device.name}: Sending command ${cmd} response.data: ${JSON.stringify(response.data)}`);\r\n\r\n            if (!('status' in response.data)) {\r\n                this.adapter.log.error(`[REST] ${device.name}: Sending command ${cmd} failed: Response received but response.data does not have key 'status'`);\r\n                return false;\r\n            }\r\n            switch (response.data.status) {\r\n                case 'OK':\r\n                    this.adapter.log.debug(`[REST] ${device.name}: Sending command ${cmd} successful: - Status = \"${response.data.status}\", Message = \"${response.data.statustext}\"`);\r\n                    return true;\r\n                case 'Error':\r\n                    if (response.data.statustext === 'Please login') {\r\n                        this.adapter.log.error(`[REST] ${device.name}: Error: Remote Admin Password seems to be incorrect. Sending command ${cmd} failed.`);\r\n                    } else {\r\n                        this.adapter.log.error(`[REST] ${device.name}: Error: Sending command ${cmd} failed, received status text: ${response.data.statustext}`);\r\n                    }\r\n                    return false;\r\n                default:\r\n                    // Unexpected\r\n                    this.adapter.log.error(`[REST] ${device.name}: Undefined response.data.status = \"${response.data.status}\" when sending command ${cmd}: ${response.status} - ${response.statusText}`);\r\n                    return false;\r\n            }\r\n        } catch (err) {\r\n            const errTxt = `[REST] ${device.name}: Sending command ${cmd} failed`;\r\n            if (axios.isAxiosError(err)) {\r\n                if (!err?.response) {\r\n                    this.adapter.log.warn(`${errTxt}: No response`);\r\n                } else if (err.response?.status === 400) {\r\n                    this.adapter.log.error('${errTxt}: Login Failed - Error 400 - ' + err.response?.statusText);\r\n                } else if (err.response?.status) {\r\n                    this.adapter.log.error(`${errTxt}: ${err.response.status} - ${err.response.statusText}`);\r\n                } else {\r\n                    this.adapter.log.error(`${errTxt}: General Error`);\r\n                }\r\n            } else {\r\n                this.adapter.log.error(`${errTxt}: Error: ${this.adapter.err2Str(err)}`);\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To encode a password to be sent to web server\r\n     * Source: fixedEncodeURIComponent() from https://github.com/arteck/ioBroker.fullybrowser/blob/master/main.js\r\n     * @param pw Password\r\n     * @returns Encoded password\r\n     */\r\n    private encodePassword(pw: string): string {\r\n        return encodeURIComponent(pw).replace(/[!'()*]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["axios"]
}
