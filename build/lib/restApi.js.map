{
  "version": 3,
  "sources": ["../../src/lib/restApi.ts"],
  "sourcesContent": ["/**\n * REST API Class\n * Purpose: sending commands to Fully, since sending via MQTT is not supported by Fully.\n */\n\nimport axios from 'axios';\nimport { FullyMqtt } from '../main';\nimport { IDevice } from './interfaces';\n\n/**\n * @class RestApi\n * @desc  To send commands via REST API to Fully Browser\n */\nexport class RestApiFully {\n    /**\n     * Constants and Variables\n     */\n    private readonly adapter: FullyMqtt;\n\n    /**\n     * Class Constructor\n     * @param adapter - ioBroker adapter instance object\n     */\n    public constructor(adapter: FullyMqtt) {\n        this.adapter = adapter;\n    }\n\n    /**\n     * Get Info Object from Fully\n     * @param ip - IP Address\n     * @returns info object, or false in case of error\n     */\n    /* ----- NO LONGER USED since v0.1.0 ---\n    public async getInfo(ip: string): Promise<{ [k: string]: any } | false> {\n        try {\n            const device = this.adapter.fullys[ip];\n            const result = await this.axiosGetInfoOrSendCmd(device, 'getInfo');\n            if (result.status && result.infoObj !== undefined) {\n                return result.infoObj;\n            } else {\n                return false;\n            }\n        } catch (e) {\n            this.adapter.log.error(`[REST] ${this.adapter.fullys[ip].name}: ${this.adapter.err2Str(e)}`);\n            return false;\n        }\n    }\n    */\n\n    /**\n     * Send a command to Fully\n     * @param device - device object\n     * @param cmd - 'loadStartURL', 'screenOn', etc.\n     * @param val - state value\n     * @returns true if successful, false if not\n     */\n    public async sendCmd(device: IDevice, cmd: string, val: any): Promise<boolean> {\n        try {\n            interface ISendCmd {\n                urlParameter: string;\n                cleanSpaces?: true;\n                encode?: true;\n            }\n            const cmds: { [k: string]: ISendCmd } = {\n                textToSpeech: { urlParameter: 'cmd=textToSpeech&text=', cleanSpaces: true, encode: true },\n                loadURL: { urlParameter: 'cmd=loadURL&url=', cleanSpaces: true, encode: true },\n                startApplication: { urlParameter: 'cmd=startApplication&package=', cleanSpaces: true },\n                screenBrightness: { urlParameter: 'cmd=setStringSetting&key=screenBrightness&value=' },\n                setAudioVolume: { urlParameter: 'cmd=setAudioVolume&stream=3&level=' },\n            };\n            let finalUrlParam = '';\n            if (cmd in cmds) {\n                if (cmds[cmd].cleanSpaces) {\n                    val = val.toString().trim();\n                    val = val.replace(/\\s+/g, ' ');\n                }\n                if (cmds[cmd].encode) {\n                    val = val.toString().trim();\n                    val = encodeURIComponent(val);\n                }\n                finalUrlParam = cmds[cmd].urlParameter + val;\n            } else {\n                finalUrlParam = 'cmd=' + cmd;\n            }\n\n            const result = await this.axiosGetInfoOrSendCmd(device, 'sendCmd', cmd, finalUrlParam);\n            return result.status;\n        } catch (e) {\n            this.adapter.log.error(`[REST] ${device.name}: ${this.adapter.err2Str(e)}`);\n            return false;\n        }\n    }\n\n    /**\n     * Axios: Get Device Info or Send Command\n     * @param device - device object\n     * @param what - 'getInfo' to get device info or 'sendCmd' to send a command\n     * @param cmd - if 'sendCmd': Command like \"screenOff\"\n     * @param urlParam - if 'sendCmd': URL parameter like \"cmd=screenOff\"\n     * @returns if what='getInfo': false if error, device info object if true\n     *          if what='sendCmd': false if error, true if successful\n     *\n     * TODO: Remove 'getInfo' since no longer used from version 0.1.0\n     *\n     */\n    private async axiosGetInfoOrSendCmd(device: IDevice, what: 'getInfo' | 'sendCmd', cmd?: string, urlParam?: string): Promise<{ status: true | false; infoObj?: { [k: string]: any } }> {\n        // Base URL\n        const baseUrl = `${device.restProtocol}://${device.ip}:${device.restPort}/?password=${this.encodePassword(device.restPassword)}&type=json`;\n        let finalUrl = '';\n        if (what === 'getInfo') {\n            finalUrl = baseUrl + '&cmd=deviceInfo';\n        } else {\n            finalUrl = baseUrl + '&' + urlParam;\n        }\n\n        // Axios config\n        const config = {\n            method: 'get',\n            timeout: this.adapter.config.restTimeout,\n        };\n\n        try {\n            // Log\n            let urlHiddenPassword = finalUrl;\n            urlHiddenPassword = urlHiddenPassword.replace(/password=.*&type/g, 'password=(hidden)&type');\n            this.adapter.log.debug(`[REST] ${device.name}: Start ${what} ${what === 'sendCmd' ? '\"' + cmd + '\"' : ''}, URL: ${urlHiddenPassword}`);\n\n            // Axios: Send command\n            const response = await axios.get(finalUrl, config);\n\n            // Errors\n            if (response.status !== 200) {\n                this.adapter.log.error(`[REST] ${device.name}: ${what} ${what === 'sendCmd' ? cmd : ''} failed: ${response.status} - ${response.statusText}`);\n                this.adapter.onAliveChange('REST', device.ip, false, '${response.status} - ${response.statusText}'); // Update isAlive\n                return { status: false };\n            }\n            if (!('status' in response)) {\n                this.adapter.log.error(`[REST] ${device.name}: ${what} ${what === 'sendCmd' ? cmd : ''} failed: Response received but it does not have key 'status'`);\n                this.adapter.onAliveChange('REST', device.ip, false, 'response without status key'); // Update isAlive\n                return { status: false };\n            }\n            if (!('data' in response)) {\n                this.adapter.log.error(`[REST] ${device.name}: ${what} ${what === 'sendCmd' ? cmd : ''} failed: Response received but it does not have key 'data'`);\n                this.adapter.onAliveChange('REST', device.ip, false, 'response without data key'); // Update isAlive\n                return { status: false };\n            }\n            this.adapter.log.debug(`[REST] ${device.name}: ${what} response.data: ${JSON.stringify(response.data)}`);\n\n            // Handle Device Info\n            if (what === 'getInfo') {\n                this.adapter.onAliveChange('REST', device.ip, true, 'information successfully received'); // Update isAlive\n                if (!('deviceName' in response.data)) {\n                    // we check if info object is ok by checking for deviceName, could also use any other key like screenOn etc.\n                    this.adapter.log.error(`[REST] ${device.name}: getInfo failed: Response data received, but data does not have key 'deviceName'`);\n                    return { status: false };\n                }\n                this.adapter.log.debug(`[REST] ${device.name}: getInfo was successful: Response = ${response.status} - ${response.statusText}`);\n                return { status: true, infoObj: response.data };\n            }\n\n            // Handle all other commands\n            if (!('status' in response.data)) {\n                this.adapter.onAliveChange('REST', device.ip, false, 'response.data without status key'); // Update isAlive\n                this.adapter.log.error(`[REST] ${device.name}: Sending ${what} failed: Response received but response.data does not have key 'status'`);\n                return { status: false };\n            }\n            switch (response.data.status) {\n                case 'OK':\n                    this.adapter.log.debug(`[REST] ${device.name}: Sending ${what} successful: - Status = \"${response.data.status}\", Message = \"${response.data.statustext}\"`);\n                    this.adapter.onAliveChange('REST', device.ip, true, 'successfully received response'); // Update isAlive\n                    return { status: true };\n                case 'Error':\n                    if (response.data.statustext === 'Please login') {\n                        this.adapter.log.error(`[REST] ${device.name}: Error: Remote Admin Password seems to be incorrect. Sending ${what} failed.`);\n                        this.adapter.onAliveChange('REST', device.ip, false, 'incorrect Remote Admin password'); // Update isAlive\n                    } else {\n                        this.adapter.log.error(`[REST] ${device.name}: Error: Sending cmd ${what} failed, received status text: ${response.data.statustext}`);\n                        this.adapter.onAliveChange('REST', device.ip, false, `sending cmd ${what} failed`); // Update isAlive\n                    }\n                    return { status: false };\n                default:\n                    // Unexpected\n                    this.adapter.log.error(`[REST] ${device.name}: Undefined response.data.status = \"${response.data.status}\" when sending cmd ${what}: ${response.status} - ${response.statusText}`);\n                    this.adapter.onAliveChange('REST', device.ip, false, 'received undefined response.data.status');\n                    return { status: false };\n            }\n        } catch (err) {\n            const errTxt = `[REST] ${device.name}: Sending ${what} failed`;\n            this.adapter.onAliveChange('REST', device.ip, false, `sending ${what} failed`); // Update isAlive\n            if (axios.isAxiosError(err)) {\n                if (!err?.response) {\n                    this.adapter.log.warn(`${errTxt}: No response`);\n                } else if (err.response?.status === 400) {\n                    this.adapter.log.error('${errTxt}: Login Failed - Error 400 - ' + err.response?.statusText);\n                } else if (err.response?.status) {\n                    this.adapter.log.error(`${errTxt}: ${err.response.status} - ${err.response.statusText}`);\n                } else {\n                    this.adapter.log.error(`${errTxt}: General Error`);\n                }\n            } else {\n                this.adapter.log.error(`[REST] ${device.name} Error: ${this.adapter.err2Str(err)}`);\n            }\n            return { status: false };\n        }\n    }\n\n    /**\n     * To encode a password to be sent to web server\n     * Source: fixedEncodeURIComponent() from https://github.com/arteck/ioBroker.fullybrowser/blob/master/main.js\n     * @param pw Password\n     * @returns Encoded password\n     */\n    private encodePassword(pw: string): string {\n        return encodeURIComponent(pw).replace(/[!'()*]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n    }\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
